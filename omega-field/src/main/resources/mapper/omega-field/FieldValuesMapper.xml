<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.omega.field.mapper.FieldValuesMapper">
    
    <resultMap type="FieldValues" id="FieldValuesResult">
        <result property="id"    column="id"    />
        <result property="type"    column="type"    />
        <result property="code"    column="code"    />
        <result property="name"    column="name"    />
        <result property="color"    column="color"    />
        <result property="createdAt"    column="created_at"    />
        <result property="updatedAt"    column="updated_at"    />
    </resultMap>

    <sql id="selectFieldValuesVo">
        select id, type, code, name, color, created_at, updated_at from field_values
    </sql>

    <select id="selectFieldValuesList" parameterType="FieldValues" resultMap="FieldValuesResult">
        <include refid="selectFieldValuesVo"/>
        <where>  
            <if test="id != null "> and id = #{id}</if>
            <if test="type != null  and type != ''"> and type = #{type}</if>
            <if test="code != null  and code != ''"> and code = #{code}</if>
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="color != null  and color != ''"> and color = #{color}</if>
            <if test="createdAt != null "> and created_at = #{createdAt}</if>
            <if test="updatedAt != null "> and updated_at = #{updatedAt}</if>
        </where>
    </select>
    
    <select id="selectFieldValuesById" parameterType="Long" resultMap="FieldValuesResult">
        <include refid="selectFieldValuesVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertFieldValues" parameterType="FieldValues" useGeneratedKeys="true" keyProperty="id">
        insert into field_values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="type != null">type,</if>
            <if test="code != null">code,</if>
            <if test="name != null">name,</if>
            <if test="color != null">color,</if>
            <if test="createdAt != null">created_at,</if>
            <if test="updatedAt != null">updated_at,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="type != null">#{type},</if>
            <if test="code != null">#{code},</if>
            <if test="name != null">#{name},</if>
            <if test="color != null">#{color},</if>
            <if test="createdAt != null">#{createdAt},</if>
            <if test="updatedAt != null">#{updatedAt},</if>
         </trim>
    </insert>

    <update id="updateFieldValues" parameterType="FieldValues">
        update field_values
        <trim prefix="SET" suffixOverrides=",">
            <if test="type != null">type = #{type},</if>
            <if test="code != null">code = #{code},</if>
            <if test="name != null">name = #{name},</if>
            <if test="color != null">color = #{color},</if>
            <if test="createdAt != null">created_at = #{createdAt},</if>
            <if test="updatedAt != null">updated_at = #{updatedAt},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteFieldValuesById" parameterType="Long">
        delete from field_values where id = #{id}
    </delete>

    <delete id="deleteFieldValuesByIds" parameterType="String">
        delete from field_values where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>